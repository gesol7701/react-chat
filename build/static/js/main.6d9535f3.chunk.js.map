{"version":3,"sources":["firebase/index.js","firebase/config.js","components/Enter.js","components/Top.js","components/Message.js","components/ChatBox.js","components/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["firebaseDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","Enter","react_default","a","createElement","MuiThemeProvider_default","className","TextField_default","multiLine","name","placehplder","value","this","props","onChange","onUserNameSet","RaisedButton_default","primary","label","onClick","enterlingTheRoom","React","Component","Top","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","user_name","fireRedirect","location","from","Enter_Enter","react_router","to","pathname","e","target","setState","alert","styles","chip","margin","wrapper","display","flexWrap","Message","message","my_name","List_default","ListItem_default","disabled","Chip_default","style","text","marginBottom","ChatBox","rows","onTextChange","onButtonClick","messagesRef","ref","ChatRoom","messages","react_router_dom","map","m","i","Message_Message","key","ChatBox_ChatBox","push","_this2","on","snapshot","val","msgs","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d9535f3.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport { firebaseConfig } from './config.js';\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\nexport const firebaseDb = firebaseApp.database();\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyDhUt6aY03x8DcyvAWjlX3nIMo98C9QWlQ\",\n  authDomain: \"chat-bfd69.firebaseapp.com\",\n  databaseURL: \"https://chat-bfd69.firebaseio.com\",\n  projectId: \"chat-bfd69\",\n  storageBucket: \"\",\n  messagingSenderId: \"163360363055\",\n  appId: \"1:163360363055:web:2ea08d14848f34d6\"\n}\n","import React from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\nexport default class Enter extends React.Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className=\"Enter\">\n          <TextField multiLine=\"true\" name='user_name' placehplder=\"名前を入力\" className=\"\" value={this.props.value} onChange={this.props.onUserNameSet} />\n          <RaisedButton primary=\"true\" label=\"Send\" className=\"\" onClick={this.props.enterlingTheRoom} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { firebaseDb } from './../firebase/index.js'\nimport TextField from 'material-ui/TextField';\nimport Enter from './Enter';\nimport { Redirect } from 'react-router'\nimport RaisedButton from 'material-ui/RaisedButton';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nclass Top extends Component {\n  constructor(props) {\n    super(props);\n    this.onUserNameSet = this.onUserNameSet.bind(this)\n    this.enterlingTheRoom = this.enterlingTheRoom.bind(this)\n    this.state = {\n      user_name: \"\",\n      fireRedirect: false\n    }\n  }\n\n  render() {\n    const { from } = this.props.location.state || '/'\n    const { fireRedirect } = this.state\n\n    return (\n      <MuiThemeProvider>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <h2>入室</h2>\n          </div>\n          <Enter onUserNameSet={this.onUserNameSet} enterlingTheRoom={this.enterlingTheRoom} />\n        </div>\n        {fireRedirect && (\n          <Redirect to={{ pathname: '/',state: { user_name: this.state.user_name }}}/>\n        )}\n      </MuiThemeProvider>\n    );\n  }\n\n  onUserNameSet(e) {\n    if(e.target.name == 'user_name') {\n      this.setState({\n        \"user_name\": e.target.value\n      });\n    }\n  }\n\n  enterlingTheRoom() {\n    if(this.state.user_name == \"\") {\n      alert('名前を入力してください')\n      return\n    }\n    this.setState({ fireRedirect: true });\n  }\n}\n\nexport default Top;\n","import React from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Avatar from 'material-ui/Avatar';\nimport List from 'material-ui/List/List';\nimport ListItem from 'material-ui/List/ListItem';\nimport Chip from 'material-ui/Chip';\nimport ChatRoom from './ChatRoom.js'\n\nconst styles = {\n  chip: {\n    margin: 4,\n  },\n  wrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n};\n\nconst style = {margintop: -5};\n\nexport default class Message extends React.Component {\n\n  render() {\n    return (\n      <div className=\"Message\">\n        {this.props.message.my_name == this.props.message.user_name ? (\n          <div className=\"MyText\">\n            <List>\n              <ListItem disabled=\"true\">\n                <div className=\"msg-dtl\">\n                  <Chip style={styles.chip} >\n                    {this.props.message.text}\n                  </Chip>\n                </div>\n                <span style={{marginBottom: -5}}>@{this.props.message.user_name}</span>\n              </ListItem>\n            </List>\n          </div>\n        ):(\n          <div className=\"Text\">\n            <List>\n              <ListItem disabled=\"true\">\n                <div className=\"msg-dtl\">\n                  <Chip style={styles.chip} >\n                    {this.props.message.text}\n                  </Chip>\n                </div>\n                <span style={{marginBottom: -5}}>@{this.props.message.user_name}</span>\n              </ListItem>\n            </List>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\nexport default class ChatBox extends React.Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className=\"ChatBox\">\n          <TextField rows=\"1\" multiLine=\"true\" name='text' className=\"\" onChange={this.props.onTextChange} />\n          <RaisedButton primary=\"true\" label=\"Send\" className=\"\" onClick={this.props.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { firebaseDb } from './../firebase/index.js'\nimport Message from './Message.js'\nimport ChatBox from './ChatBox.js'\nimport Top from './Top.js'\nimport '../css/index.css';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nconst messagesRef = firebaseDb.ref('messages')\n\nclass ChatRoom extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onTextChange = this.onTextChange.bind(this)\n    this.onButtonClick = this.onButtonClick.bind(this)\n    this.state = {\n      text : \"\",\n      user_name: \"\",\n      messages : []\n    }\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className=\"App\">\n          {!this.props.location.state && (\n            <div className=\"App-header\">\n              <h4>書き込むには入室してください <Link to='/enter'>入室</Link></h4>\n            </div>\n          )}\n          <div className=\"App-header\">\n            <h2>チャット</h2>\n          </div>\n          <div className=\"MessageList\">\n            {this.state.messages.map((m, i) => {\n              return <Message key={i} message={m} />\n            })}\n          </div>\n          <ChatBox onTextChange={this.onTextChange} onButtonClick={this.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n\n  onTextChange(e) {\n    if (e.target.name == 'text') {\n      this.setState({\n        \"text\": e.target.value,\n      });\n    }\n  }\n\n  onButtonClick() {\n    if(this.state.text == \"\") {\n      alert('テキストを入力してください')\n      return\n    }\n    if(!this.props.location.state) {\n      alert('名前を入力し入室してください')\n      return\n    }\n    messagesRef.push({\n      \"user_name\" : this.props.location.state.user_name,\n      \"text\" : this.state.text,\n    })\n  }\n\n  componentWillMount() {\n    messagesRef.on('child_added', (snapshot) => {\n      const m = snapshot.val()\n      let msgs = this.state.messages\n      if(!this.props.location.state) {\n        msgs.push({\n          'text' : m.text,\n          'user_name' : m.user_name,\n          'my_name' : \"\",\n        })\n      } else {\n        msgs.push({\n          'text' : m.text,\n          'user_name' : m.user_name,\n          'my_name' : this.props.location.state.user_name,\n        })\n      }\n\n      this.setState({\n        messages : msgs\n      });\n    })\n  }\n\n}\n\nexport default ChatRoom;\n","import React from 'react'\nimport Top from './components/Top'\nimport ChatRoom from './components/ChatRoom'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n} from 'react-router-dom'\n\nconst App = () => (\n  <Router>\n    <Route exact path=\"/\" component={ChatRoom} />\n    <Route path=\"/enter\" component={Top} />\n  </Router>\n)\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport ChatRoom from './components/ChatRoom'\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport injectTapEventPlugin from 'react-tap-event-plugin';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}